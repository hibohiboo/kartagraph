schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  "ユーザのパラグラフ遷移履歴保存"
  insert_user_paragraph_history(
    objects: [user_paragraph_history!]!
    on_conflict: user_paragraph_history_on_conflict
  ): mutation_response
  UpdateParagraphs: UpdateParagraphs
}
type UpdateParagraphs {
  "更新前に関係の削除"
  delete_paragraphs_relation(where: deleteWhere): mutation_response
  "パラグラフを更新"
  insert_paragraphs_one(
    on_conflict: insert_paragraphs_one_on_conflict
    object: Paragraph
  ): insert_paragraphs_one_response
  insert_paragraphs_relation(
    objects: [Relation]
    on_conflict: insert_paragraphs_relation_onconflict
  ): mutation_response
}
input Relation {
  "パラグラフID"
  from: String
  "パラグラフID"
  to: String
}
scalar paragraphs_relation_pkey
input insert_paragraphs_relation_onconflict {
  constraint: paragraphs_relation_pkey
  update_columns: [String] = []
}
type insert_paragraphs_one_response {
  "挿入したパラグラフID"
  pid: String
}
scalar paragraphs_pkey
scalar paragraph
input insert_paragraphs_one_on_conflict {
  constraint: paragraphs_pkey
  update_columns: paragraph
}
input Paragraph {
  paragraph: String
  pid: String
  title: String
}

input whereEq {
  _eq: String
}
input deleteWhere {
  from: whereEq
}
input user_paragraph_history {
  "firebaseのUID"
  uid: String!
  "パラグラフID。日本語含む文字列"
  pid: String!
  "移動したUNIXTIME（ミリ秒）"
  moved_epoctime: Int!
}
scalar user_paragraph_history_pkey
input user_paragraph_history_on_conflict {
  constraint: user_paragraph_history_pkey
  "全て主キーなので空配列を指定"
  update_columns: [String]! = []
}

#  mutaion を行った結果返ってくる respose の type
type mutation_response {
  # mutation によって影響を受けた row の数
  affected_rows: Int!

  # mutation によって影響を受けた row の情報
  # returning: [article!]!
}

type Query {
  getRelation: paragraphs_relation
  getParagraphs: paragraphs
}

type paragraphs_relation {
  "パラグラフID"
  from: String!
  "パラグラフID"
  to: String!
}
type paragraphs {
  "パラグラフID"
  pid: String!
  "パラグラフのタイトル"
  title: String!
}
